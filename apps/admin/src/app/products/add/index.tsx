import { Card, Flex, Form, Space, Typography } from 'antd'
import GeneralInfo from '@layout/components/products/GeneralInfo.tsx'
import SkuForm from '@layout/components/products/SkuForm.tsx'
import FormFooter from '@layout/components/products/FormFooter.tsx'
import { useDispatch } from 'react-redux'
import { AppDispatch } from '@store/store.ts'
import { addProduct } from '@store/slices/productSlice.ts'
import { toast } from 'react-toastify'

const { Title, Text } = Typography
const CreateProduct = () => {
  const [form] = Form.useForm()
  const dispatch = useDispatch<AppDispatch>()

  const handleSubmit = async (values) => {
    console.log('üü¢ Form values:', values)

    const formData = new FormData()

    // Th√™m c√°c th√¥ng tin s·∫£n ph·∫©m v√†o FormData
    formData.append('name', values.productName)
    formData.append('category_id', values?.category)
    formData.append('brand_id', values?.brand)
    formData.append('description', values.description)
    formData.append('is_published', values.visible ? 1 : 0)

    // Th√™m ·∫£nh s·∫£n ph·∫©m v√†o FormData
    values.imageUrl.forEach((file) => {
      formData.append('image_url', file.originFileObj)
    })

    // Th√™m c√°c SKU v√†o FormData
    values?.skus?.forEach((sku, index) => {
      formData.append(`skus[${index}][price]`, sku.price)
      formData.append(`skus[${index}][stock]`, sku.stock)

      if (sku.attributes) {
        Object.entries(sku.attributes).forEach(([attributeId, value]) => {
          formData.append(
            `skus[${index}][attributes][${attributeId}][attribute_id]`,
            attributeId,
          )
          formData.append(
            `skus[${index}][attributes][${attributeId}][value]`,
            value,
          )
        })
      }

      sku.image_url?.forEach((file) => {
        formData.append(`skus[${index}][image_url]`, file.originFileObj)
      })
      formData.forEach((value, key) => {
        console.log(`FormData key: ${key}, value: ${value}`)
      })
    })

    try {
      // G·ª≠i FormData ƒë·ªÉ t·∫°o s·∫£n ph·∫©m, bao g·ªìm th√¥ng tin s·∫£n ph·∫©m v√† ·∫£nh
      await dispatch(addProduct(formData)) // Gi·∫£ s·ª≠ api.createProduct l√† h√†m API ƒë·ªÉ t·∫°o s·∫£n ph·∫©m

      // Sau khi g·ª≠i FormData th√†nh c√¥ng, b·∫°n c√≥ th·ªÉ l√†m g√¨ ƒë√≥ nh∆∞ hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
      toast.success('S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!')

      // B·∫°n c√≥ th·ªÉ dispatch c√°c action kh√°c n·∫øu c·∫ßn sau khi t·∫°o s·∫£n ph·∫©m th√†nh c√¥ng
    } catch (error) {
      console.error('‚ùå Error submitting product:', error)
      toast.error('L·ªói khi g·ª≠i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i!')
    }
  }

  return (
    <Flex vertical gap="large" style={{ padding: '24px', width: '100%' }}>
      <Space direction="vertical" size="small">
        <Title level={3}>Th√™m Danh M·ª•c M·ªõi</Title>
        <Text type="secondary">
          ƒêi·ªÅn th√¥ng tin ƒë·ªÉ th√™m danh m·ª•c v√†o h·ªá th·ªëng.
        </Text>
      </Space>
      <Card style={{ maxWidth: 800, width: '100%' }}>
        <Form form={form} layout="vertical" onFinish={handleSubmit}>
          <GeneralInfo form={form} />
          <SkuForm />
          <FormFooter
            onSubmit={form.submit}
            onSubmitAndNew={() => {
              form.submit()
              form.resetFields()
            }}
            onCancel={() => form.resetFields()}
          />
        </Form>
      </Card>
    </Flex>
  )
}

export default CreateProduct
